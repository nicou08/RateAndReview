@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Newtonsoft.Json.Linq
@using RateAndReview.Models
@using RateAndReview.Services

@inject RapidApiService RapidApiService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider

@implements IDisposable

@rendermode InteractiveServer

<div class="headerContainer2">
    <NavLink class="nav-link" href="/">
        <div class="logoContainer">
            <img src="images/FilmCameraIcon3.jpg" alot="Camera Logo" class="logo" />
            <div class="title">
                R & R
            </div>
        </div>
    </NavLink>

    <div class="infoContainer">

        <div class="searchBox">
            <InputText type="text" @onkeyup="CheckForEnter" @bind-Value="searchQuery" placeholder="Search" style="width: 100%; padding-left: 20px; padding-right: 20px; padding-top: 8px; padding-bottom: 8px; border-radius: 10px;" />
            @if (showSearchResults)
            {
                <div class="searchResultsContainer">

                    @if (searchResultsList.Count > 0)
                    {
                        @foreach (var media in searchResultsList)
                        {
                            <NavLink class="nav-link" href="@("/show/" + @media.imdbID)">
                                <div class="searchResultItem" @onclick="clearSearchResults">
                                    <div>
                                        <img src="@media.mediaPoster" alt="@media.mediaTitle" class="searchResultPoster" />
                                    </div>
                                    <div class="searchResultItemInfo">
                                        <div class="searchResultItemTitle">
                                            @media.mediaTitle
                                        </div>
                                        <div class="searchResultItemType">
                                            @media.mediaType
                                        </div>
                                        <div class="searchResultItemDate">
                                            @media.releaseDate
                                        </div>
                                    </div>
                                </div>
                            </NavLink>
                        }
                    }
                    else
                    {
                        <div class="seachResultNoMatches">
                            No Results Found
        
                        </div>
                    }
                    <div class="searchResultButtonContainer">
                        <button @onclick="clearSearchResults" class="searchResultsClose">Close</button>
                    </div>
               
                </div>
            }
        </div>

        <AuthorizeView>
            <Authorized Context="authContext">
                <NavLink class="nav-link" href="Account/Manage">
                    <div class="infoAccount">
                        <div class="infoAccountIcon">
                            <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" fill="currentColor" class="bi bi-person-circle" viewBox="0 0 16 16">
                                <path d="M11 6a3 3 0 1 1-6 0 3 3 0 0 1 6 0" />
                                <path fill-rule="evenodd" d="M0 8a8 8 0 1 1 16 0A8 8 0 0 1 0 8m8-7a7 7 0 0 0-5.468 11.37C3.242 11.226 4.805 10 8 10s4.757 1.225 5.468 2.37A7 7 0 0 0 8 1" />
                            </svg>
                        </div>
                        <div class="infoAccountText">
                            Account
                        </div>
                    </div>
                </NavLink>
            </Authorized>
            <NotAuthorized>
                <NavLink class="nav-link" href="Account/Login">
                    <div class="infoAccount">
                        <div class="infoAccountIcon">
                            <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" fill="currentColor" class="bi bi-box-arrow-in-right" viewBox="0 0 16 16">
                                <path fill-rule="evenodd" d="M6 3.5a.5.5 0 0 1 .5-.5h8a.5.5 0 0 1 .5.5v9a.5.5 0 0 1-.5.5h-8a.5.5 0 0 1-.5-.5v-2a.5.5 0 0 0-1 0v2A1.5 1.5 0 0 0 6.5 14h8a1.5 1.5 0 0 0 1.5-1.5v-9A1.5 1.5 0 0 0 14.5 2h-8A1.5 1.5 0 0 0 5 3.5v2a.5.5 0 0 0 1 0z" />
                                <path fill-rule="evenodd" d="M11.854 8.354a.5.5 0 0 0 0-.708l-3-3a.5.5 0 1 0-.708.708L10.293 7.5H1.5a.5.5 0 0 0 0 1h8.793l-2.147 2.146a.5.5 0 0 0 .708.708z" />
                            </svg>
                        </div>
                        <div class="infoAccountText">
                            Login
                        </div>
                    </div>
                </NavLink>
            </NotAuthorized>
        </AuthorizeView>
    </div>
</div>

@code {
    private string? currentUrl;

    public string searchQuery { get; set; } = "";

    public bool showSearchResults { get; set; } = false;

    public List<SearchResult> searchResultsList = new List<SearchResult>();

    public SearchModel searchModel = new SearchModel();

    protected override void OnInitialized()
    {
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }

    public async void CheckForEnter(KeyboardEventArgs e)
    {
        //Console.WriteLine("CheckForEnter Triggered");
        if (e.Key == "Enter")
        {
            Console.WriteLine("Enter was pressed");
            Console.WriteLine("Search Query: " + searchQuery);

            searchResultsList.Clear();

            await Search();

            Console.WriteLine("Search finished");
            Console.WriteLine(showSearchResults);

            if (showSearchResults == false)
            {
                Console.WriteLine("If statement showSearchResults triggered");
                ToggleSearchResults();
                Console.WriteLine(showSearchResults);
            }
            StateHasChanged();
        }
    }

    public void ToggleSearchResults()
    {
        showSearchResults = !showSearchResults;
    }


    public void clearSearchResults()
    {
        searchResultsList.Clear();
        searchQuery = "";
        ToggleSearchResults();
    }

    private async Task Search()
    {
        Console.WriteLine("Search Triggered");
        Console.WriteLine("Search Query: " + searchQuery);

        if (!String.IsNullOrWhiteSpace(searchQuery))
        {
            var searchResults = await RapidApiService.GetSearchByAka(searchQuery); 

            //Console.WriteLine("Search Results:");
            //Console.WriteLine(searchResults);

            JObject searchResultsJson = JObject.Parse(searchResults);

            Console.WriteLine("Search Results JSON:");
            Console.WriteLine(searchResultsJson);

            if (searchResultsJson["results"] != null)
            {
                foreach (var result in searchResultsJson["results"])
                {
                    Console.WriteLine("Result");
                    //Console.WriteLine(result);
                    Console.WriteLine(result["id"]);
                    if (result["titleType"]["text"].ToString() == "TV Series")
                    {
                        var ImgUrl = "";
                        if (result["titleText"]["text"].ToString() == "Breaking Bad")
                        {
                            ImgUrl = "https://m.media-amazon.com/images/M/MV5BYmQ4YWMxYjUtNjZmYi00MDQ1LWFjMjMtNjA5ZDdiYjdiODU5XkEyXkFqcGdeQXVyMTMzNDExODE5._V1_.jpg";
                        }
                        else
                        {
                            ImgUrl = result["primaryImage"]["url"].ToString();
                        }
                        var newSearchResult = new SearchResult
                        {
                            imdbID = result["id"].ToString(),
                            mediaTitle = result["titleText"]["text"].ToString(),
                            mediaType = result["titleType"]["text"].ToString(),
                            mediaPoster = ImgUrl,
                            releaseDate = result["releaseYear"]["year"].ToString(),
                            endDate = result["releaseYear"]["endYear"].ToString()
                        };

                        Console.WriteLine("New search Result:");
                        Console.WriteLine(newSearchResult.mediaTitle);
                        Console.WriteLine(newSearchResult.mediaType);
                        Console.WriteLine(newSearchResult.releaseDate);

                        searchResultsList.Add(newSearchResult);
                    }
                }
            }
        }
    }
}

    @* <div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">RateAndReview</a>
    </div>
</div>

<input type="checkbox" title="Navigation menu" class="navbar-toggler" />

<div class="nav-scrollable" onclick="document.querySelector('.navbar-toggler').click()">
    <nav class="">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="bi bi-house-door-fill-nav-menu" aria-hidden="true"></span> Home
            </NavLink>
        </div>

        <div class="nav-item px-3">
            <NavLink class="nav-link" href="counter">
                <span class="bi bi-plus-square-fill-nav-menu" aria-hidden="true"></span> Counter
            </NavLink>
        </div>

        <div class="nav-item px-3">
            <NavLink class="nav-link" href="weather">
                <span class="bi bi-list-nested-nav-menu" aria-hidden="true"></span> Weather
            </NavLink>
        </div>

        <div class="nav-item px-3">
            <NavLink class="nav-link" href="auth">
                <span class="bi bi-lock-nav-menu" aria-hidden="true"></span> Auth Required
            </NavLink>
        </div>

        <AuthorizeView>
            <Authorized>
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="Account/Manage">
                        <span class="bi bi-person-fill-nav-menu" aria-hidden="true"></span> @context.User.Identity?.Name
                    </NavLink>
                </div>
                <div class="nav-item px-3">
                    <form action="Account/Logout" method="post">
                        <AntiforgeryToken />
                        <input type="hidden" name="ReturnUrl" value="@currentUrl" />
                        <button type="submit" class="nav-link">
                            <span class="bi bi-arrow-bar-left-nav-menu" aria-hidden="true"></span> Logout
                        </button>
                    </form>
                </div>
            </Authorized>
            <NotAuthorized>
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="Account/Register">
                        <span class="bi bi-person-nav-menu" aria-hidden="true"></span> Register
                    </NavLink>
                </div>
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="Account/Login">
                        <span class="bi bi-person-badge-nav-menu" aria-hidden="true"></span> Login
                    </NavLink>
                </div>
            </NotAuthorized>
        </AuthorizeView>
    </nav>
</div> *@