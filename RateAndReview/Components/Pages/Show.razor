@page "/show/{showId}"

@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@using System.Linq
@using Newtonsoft.Json.Linq
@using RateAndReview.Models
@using RateAndReview.Services

@inject MongoDBService MongoDBService
@inject RapidApiService RapidApiService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime JSRuntime

@rendermode InteractiveServer

<PageTitle>Gregarious</PageTitle>

<div class="page">
    <div class="showInfoContainer">
        <div class="showInfoFirst">
            <div class="showImageContainer">
                <img class="showImage" src="@ImageURL" />
            </div>
            <div class="showTitle">
                @ShowTitle
            </div>
            <div class="showType">
                <div class="showDes">Type</div>
                @MediaType
            </div>
            <div class="showType">
                <div class="showDes">Release Date</div>
                @ReleaseDate
            </div>

            @if (MediaType == "TV Series")
            {
                @if (!string.IsNullOrEmpty(EndDate))
                {
                    <div class="showType">
                        <div class="showDes">End Date</div>
                        @EndDate
                    </div>
                    <div class="showType">
                        <div class="showDes">Status</div>
                        Finished
                    </div>
                }
                else
                {
                    <div class="showType">
                        <div class="showDes">Status</div>
                        Ongoing
                    </div>
                }
            }

            @* <h2 style="color: white;">Hello s: @showId</h2> *@
       
            @if (mediaInfo != null)
            {
                var percent5 = (float)mediaInfo.number5Stars / mediaInfo.numberOfReviews * 100;
                var percent4 = (float)mediaInfo.number4Stars / mediaInfo.numberOfReviews * 100;
                var percent3 = (float)mediaInfo.number3Stars / mediaInfo.numberOfReviews * 100;
                var percent2 = (float)mediaInfo.number2Stars / mediaInfo.numberOfReviews * 100;
                var percent1 = (float)mediaInfo.number1Stars / mediaInfo.numberOfReviews * 100;
                <div class="showType">
                    <div class="showDes">Rating</div>
                    @mediaInfo.rating.ToString("0.0")
                </div>
                <div class="rating-graph">
                    <div class="rating-row">
                        <div class="rating-star-style">
                            5
                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="#f2c84b" class="bi bi-star-fill" viewBox="0 0 16 16" style="margin-left: 10px;">
                                <path d="M3.612 15.443c-.386.198-.824-.149-.746-.592l.83-4.73L.173 6.765c-.329-.314-.158-.888.283-.95l4.898-.696L7.538.792c.197-.39.73-.39.927 0l2.184 4.327 4.898.696c.441.062.612.636.282.95l-3.522 3.356.83 4.73c.078.443-.36.79-.746.592L8 13.187l-4.389 2.256z" />
                            </svg>
                        </div>
                        <div class="rating-bar-container">
                            <div class="rating-bar" style="width: @percent5.ToString("0.0")%;">
                            </div>
                        </div>
                    </div>
                    <div class="ratingSpace"></div>
                    <div class="rating-row">
                        <div class="rating-star-style">
                            4
                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="#f2c84b" class="bi bi-star-fill" viewBox="0 0 16 16" style="margin-left: 10px;">
                                <path d="M3.612 15.443c-.386.198-.824-.149-.746-.592l.83-4.73L.173 6.765c-.329-.314-.158-.888.283-.95l4.898-.696L7.538.792c.197-.39.73-.39.927 0l2.184 4.327 4.898.696c.441.062.612.636.282.95l-3.522 3.356.83 4.73c.078.443-.36.79-.746.592L8 13.187l-4.389 2.256z" />
                            </svg>
                        </div>
                        <div class="rating-bar-container">
                            <div class="rating-bar" style="width: @percent4.ToString("0.0")%;">
                            </div>
                        </div>
                    </div>
                    <div class="ratingSpace"></div>
                    <div class="rating-row">
                        <div class="rating-star-style">
                            3
                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="#f2c84b" class="bi bi-star-fill" viewBox="0 0 16 16" style="margin-left: 10px;">
                                <path d="M3.612 15.443c-.386.198-.824-.149-.746-.592l.83-4.73L.173 6.765c-.329-.314-.158-.888.283-.95l4.898-.696L7.538.792c.197-.39.73-.39.927 0l2.184 4.327 4.898.696c.441.062.612.636.282.95l-3.522 3.356.83 4.73c.078.443-.36.79-.746.592L8 13.187l-4.389 2.256z" />
                            </svg>
                        </div>
                        <div class="rating-bar-container">
                            <div class="rating-bar" style="width: @percent3.ToString("0.0")%;">
                            </div>
                        </div>
                    </div>
                    <div class="ratingSpace"></div>
                    <div class="rating-row">
                        <div class="rating-star-style">
                            2
                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="#f2c84b" class="bi bi-star-fill" viewBox="0 0 16 16" style="margin-left: 10px;">
                                <path d="M3.612 15.443c-.386.198-.824-.149-.746-.592l.83-4.73L.173 6.765c-.329-.314-.158-.888.283-.95l4.898-.696L7.538.792c.197-.39.73-.39.927 0l2.184 4.327 4.898.696c.441.062.612.636.282.95l-3.522 3.356.83 4.73c.078.443-.36.79-.746.592L8 13.187l-4.389 2.256z" />
                            </svg>
                        </div>
                        <div class="rating-bar-container">
                            <div class="rating-bar" style="width: @percent2.ToString("0.0")%;">
                            </div>
                        </div>
                    </div>
                    <div class="ratingSpace"></div>
                    <div class="rating-row">
                        <div class="rating-star-style">
                            1
                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="#f2c84b" class="bi bi-star-fill" viewBox="0 0 16 16" style="margin-left: 10px;">
                                <path d="M3.612 15.443c-.386.198-.824-.149-.746-.592l.83-4.73L.173 6.765c-.329-.314-.158-.888.283-.95l4.898-.696L7.538.792c.197-.39.73-.39.927 0l2.184 4.327 4.898.696c.441.062.612.636.282.95l-3.522 3.356.83 4.73c.078.443-.36.79-.746.592L8 13.187l-4.389 2.256z" />
                            </svg>
                        </div>
                        <div class="rating-bar-container">
                            <div class="rating-bar" style="width: @percent1.ToString("0.0")%;">
                            </div>
                        </div>
                    </div>
                    <div class="ratingSpace"></div>
                </div>

                <div class="showNumReviews">
                    @mediaInfo.numberOfReviews user reviews
                </div>
            }
        </div>
        <div class="showInfoSecond">
            <AuthorizeView>
                <Authorized Context="authContext">
                    @* @if (userEmail != null)
                    {
                        <div style="color: white;">
                              SUER: @userEmail
                        </div>
                    } *@
                    

                    @if (showReviewInput)
                    {
                        @* <div class="writingForm">
                            <InputText @bind-Value="reviewMessage" class="form-control form-control-color: red" placeholder="Write a review" />
                            <button @onclick="WriteReview" class="btn btn-primary">Submit</button>
                        </div> *@
                        <button @onclick="ToggleReviewInput" class="btn btn-secondary">Cancel</button>
                        
                        <div style="height: 20px;"></div>

                        <EditForm Model=@reviewModel OnValidSubmit=@WriteReview>
                            <DataAnnotationsValidator />
                            <ValidationSummary />

                            <div class="form-group">
                                <InputTextArea @bind-Value="reviewModel.ReviewMessage" rows="3" style="padding: 10px; border-radius: 10px; width: 100%" class="writingForm" placeholder="Write a review" />
                                <ValidationMessage For="@(() => reviewModel.ReviewMessage)" />
                            </div>
                            <div class="formOptions">
                                <div>
                                    @for (int i = 1; i <= 5; i++)
                                    {
                                        var starIndex = i; // Capture the variable to avoid closure issues
                                        <span @onclick="(() => SetRating(starIndex))">
                                            @if (userRating >= starIndex)
                                            {
                                                <svg xmlns="http://www.w3.org/2000/svg" width="22" height="22" fill="#f2c84b" class="bi bi-star-fill" viewBox="0 0 16 16" style="margin-left: 15px;">
                                                    <path d="M3.612 15.443c-.386.198-.824-.149-.746-.592l.83-4.73L.173 6.765c-.329-.314-.158-.888.283-.95l4.898-.696L7.538.792c.197-.39.73-.39.927 0l2.184 4.327 4.898.696c.441.062.612.636.282.95l-3.522 3.356.83 4.73c.078.443-.36.79-.746.592L8 13.187l-4.389 2.256z" />
                                                </svg>
                                            }
                                            else
                                            {
                                                <svg xmlns="http://www.w3.org/2000/svg" width="22" height="22" fill="white" class="bi bi-star" viewBox="0 0 16 16" style="margin-left: 15px;">
                                                    <path d="M2.866 14.85c-.078.444.36.791.746.593l4.39-2.256 4.389 2.256c.386.198.824-.149.746-.592l-.83-4.73 3.522-3.356c.33-.314.16-.888-.282-.95l-4.898-.696L8.465.792a.513.513 0 0 0-.927 0L5.354 5.12l-4.898.696c-.441.062-.612.636-.283.95l3.523 3.356-.83 4.73zm4.905-2.767-3.686 1.894.694-3.957a.56.56 0 0 0-.163-.505L1.71 6.745l4.052-.576a.53.53 0 0 0 .393-.288L8 2.223l1.847 3.658a.53.53 0 0 0 .393.288l4.052.575-2.906 2.77a.56.56 0 0 0-.163.506l.694 3.957-3.686-1.894a.5.5 0 0 0-.461 0z" />
                                                </svg>
                                            }
                                        </span>
                                    }
                                </div>
                                <button type="submit" class="btn btn-primary">Submit</button>
                            </div>
                        </EditForm>
                    } else
                    {
                        <button @onclick="ToggleReviewInput" class="btn btn-primary">Write Review</button>
                    }

                </Authorized>
                <NotAuthorized>
                    <NavLink class="" href="Account/Login">
                        <button class="signInButton">Sign in to review show</button>
                    </NavLink>
                </NotAuthorized>
            </AuthorizeView>

            <div style="height: 40px;"></div>

            @if (reviews != null)
            {
                Console.WriteLine("Reviews are not null");
                Console.WriteLine("Reviews Length: ", reviews.Count);
                if (reviews.Count > 0)
                {
                    @* List<Review> reviewsReversed = reviews;
                    reviewsReversed.Reverse(); *@
                    List<Review> reviewsReversed = SortReviewsByDate();
                    foreach (var review in reviewsReversed)
                    {
                        <div class="reviewContainer2">
                            <div class="reviewInfo">
                                <div class="reviewAuthor">
                                    REVIEW BY: @review.author.Substring(0, review.author.IndexOf('@'))
                                </div>
                                <div class="reviewDate">
                                    @review.date.ToString("MMMM dd, yyyy")
                                </div>
                            </div>
                            <div class="reviewMessage">
                                @review.review
                            </div>
                            <div class="reviewRatingContainer">
                                <div class="reviewRating">
                                    @review.rating / 5
                                </div>
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="#f2c84b" class="bi bi-star-fill" viewBox="0 0 16 16" style="margin-left: 10px;">
                                    <path d="M3.612 15.443c-.386.198-.824-.149-.746-.592l.83-4.73L.173 6.765c-.329-.314-.158-.888.283-.95l4.898-.696L7.538.792c.197-.39.73-.39.927 0l2.184 4.327 4.898.696c.441.062.612.636.282.95l-3.522 3.356.83 4.73c.078.443-.36.79-.746.592L8 13.187l-4.389 2.256z" />
                                </svg>
                            </div>
                            @* <div class="reviewOptions">
                            <button>Upvote</button>
                            <button>Downvote</button>
                        </div> *@
                        </div>
                        <div class="spaceReviews"></div>
                    }
                } else
                {
                    <div class="no-reviews-container">
                        Show has not been reviewed yet
                    </div>
                }
            } 
        </div>
    </div>
</div>

@code {
    [Parameter]
    public string? showId { get; set; }

    private string userEmail;

    public string mediaDataJson { get; set; }

    public string ImageURL { get; set; } = "";

    public string ShowTitle { get; set; } = "";

    public string MediaType { get; set; } = "";

    public string ReleaseDate { get; set; } = "";

    public string EndDate { get; set; } = null;

    public Media mediaInfo { get; set; }

    public List<Review> reviews { get; set; }

    public ReviewModel reviewModel = new ReviewModel();

    public bool showReviewInput = false;

    public string reviewMessage { get; set; }

    public float userRating { get; set; } = 0;

    public float star5Percent = 0.0f;
    public float star4Percent = 0.0f;
    public float star3Percent = 0.0f;
    public float star2Percent = 0.0f;
    public float star1Percent = 0.0f;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity.IsAuthenticated)
        {
            userEmail = user.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Email)?.Value;
        }

        if (showId != null)
        {
            //var movie = await RapidApiService.GetMediaDetails(showId);
            // Console.WriteLine("GREGARIOUS SHOWWWWWWWWWWW ");
            mediaDataJson = await RapidApiService.GetMediaDetails(showId);

            JObject mediaDataJsonObject = JObject.Parse(mediaDataJson);

            ShowTitle = mediaDataJsonObject["results"]["titleText"]["text"].ToString();
            if (ShowTitle == "Breaking Bad")
            {
                ImageURL = "https://m.media-amazon.com/images/M/MV5BYmQ4YWMxYjUtNjZmYi00MDQ1LWFjMjMtNjA5ZDdiYjdiODU5XkEyXkFqcGdeQXVyMTMzNDExODE5._V1_.jpg";
            } else
            {
                ImageURL = mediaDataJsonObject["results"]["primaryImage"]["url"].ToString();
            }
            MediaType = mediaDataJsonObject["results"]["titleType"]["text"].ToString();
            ReleaseDate = mediaDataJsonObject["results"]["releaseYear"]["year"].ToString();
            EndDate = mediaDataJsonObject["results"]["releaseYear"]["endYear"].ToString();
            Console.WriteLine("What is good EndDate: {0}", EndDate);

            mediaInfo = await MongoDBService.GetMediaDataAsync(showId);

            reviews = await MongoDBService.GetReviewsByMediaIdAsync(showId);
        }
    }

    private async Task WriteReview()
    {
        if (userRating < 1 || userRating > 5)
        {
            return;
        }

        DateTime currentDate = DateTime.UtcNow;

        var review = new Review
        {
            mediaId = showId,
            author = userEmail,
            review = reviewModel.ReviewMessage,
            rating = userRating,
            date = currentDate,
            votes = 0
        };

        reviews.Add(review);

        await MongoDBService.AddReviewAsync(review);

        if (mediaInfo == null)
        {
            if (showId != null)
            {
                mediaInfo = new Media
                {
                    imdbID = showId,
                    mediaTitle = ShowTitle,
                    mediaType = MediaType,
                    mediaPoster = ImageURL,
                    releaseDate = ReleaseDate,
                    endDate = EndDate,
                    rating = userRating,
                    numberOfReviews = 1,
                    number5Stars = userRating == 5 ? 1 : 0,
                    number4Stars = userRating == 4 ? 1 : 0,
                    number3Stars = userRating == 3 ? 1 : 0,
                    number2Stars = userRating == 2 ? 1 : 0,
                    number1Stars = userRating == 1 ? 1 : 0,
                };
                await MongoDBService.AddMediaAsync(mediaInfo);
            }
        } else
        {
            var sumOfAllRatings = mediaInfo.rating * mediaInfo.numberOfReviews;
            sumOfAllRatings += userRating;
            mediaInfo.rating = sumOfAllRatings / (mediaInfo.numberOfReviews + 1);
            mediaInfo.numberOfReviews += 1;
            switch (userRating)
            {
                case 5:
                    mediaInfo.number5Stars += 1;
                    break;
                case 4:
                    mediaInfo.number4Stars += 1;
                    break;
                case 3:
                    mediaInfo.number3Stars += 1;
                    break;
                case 2:
                    mediaInfo.number2Stars += 1;
                    break;
                case 1:
                    mediaInfo.number1Stars += 1;
                    break;
            }

            await MongoDBService.UpdateMediaAsync(mediaInfo);
        }

        reviews = await MongoDBService.GetReviewsByMediaIdAsync(showId);

        mediaInfo = await MongoDBService.GetMediaDataAsync(showId);

        ToggleReviewInput();
    }

    private void ToggleReviewInput()
    {
        showReviewInput = !showReviewInput;
        userRating = 0;
        reviewModel.ReviewMessage = "";
    }

    private void SetRating(int starIndex)
    {
        userRating = starIndex;
    }

    private List<Review> SortReviewsByDate()
    {
        return reviews.OrderByDescending(r => r.date).ToList();
    }
}
